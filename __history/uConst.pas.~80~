unit uConst;

interface
uses
  System.Generics.Collections, System.Types, System.strUtils, system.SysUtils, system.classes;

type
  tColumnClass = class
  public
    sLabel : String;
    iPos : integer;
    iLen : integer;
    constructor create(aPos1, aLen : Integer);
  end;

  tWingetPackage = Class
  public
    Nom : String;
    ID : String;
    Version : String;
    Disponible : string;
    Source : string;
  End;

var
  dUpgradeColumn : TDictionary<String, tColumnClass>;
  dListColumn : TDictionary<String, tColumnClass>;

  lListColumn : TStrings;

  procedure makeUpgradeDictonary(sLine : String);

implementation

  procedure makeUpgradeDictonary(sLine : String);
  var
    iPosNom,
    iPosID,
    iPosVersion,
    iPosDispo,
    iPosSource : Integer;
    iLen : Integer;
    pColumn : tColumnClass;
    lHeaders : TStringDynArray;
    lsHeaders : tStringList;
    i : integer;
  begin
    lHeaders := SplitString(sLine,' ');
    i := 0;
    lsHeaders := tStringList.Create;
    lsHeaders.AddStrings(lHeaders);
    while i <= lsHeaders.Count -1 do
    begin
      if trim(lsHeaders[i]) = '' then
      begin
         lsheaders.Delete(i);
      end
      else
        inc(i);
    end;


//    iPosNom := pos('Nom',sLine);
//    iPosID := pos('ID',sLine);
//    iPosVersion := pos('Version',sLine);
//    iPosDispo := pos('Disponible',sLine);
//    iPosSource := pos('Source',sLine);
//    iLen := length(sLine);
//
//    dUpgradeColumn := TDictionary<String,tColumnClass>.create;

      lListColumn := tStringlist.Create;
      i := 0;
      repeat
        var key := lsHeaders[i];
        var iPosCol := pos(key,sLine);
        var iLenCol := 0;
        pColumn := tColumnClass.Create(iPosCol,iLenCol);
        inc(i);
        lListColumn.AddObject(key,pColumn)
      until i > lsHeaders.Count -1;

      i := 0;
      repeat
         if i < lsHeaders.Count -1 then
         begin

         end
         else
         begin

         end;
         inc(i);
      until i < lsHeaders.Count -1;

//    pColumnClass := tColumnClass.Create(iPosNom,iPosID-iPosNom);
//    dUpgradeColumn.Add('Nom',pColumnClass);
//
//    pColumnClass := tColumnClass.Create(iPosID,iPosVersion-iPosID);
//    dUpgradeColumn.Add('ID',pColumnClass);
//
//    pColumnClass := tColumnClass.Create(iPosVersion,iPosDispo-iPosVersion);
//    dUpgradeColumn.Add('Version',pColumnClass);
//
//    pColumnClass := tColumnClass.Create(iPosDispo,iPosSource-iPosDispo);
//    dUpgradeColumn.Add('Disponible',pColumnClass);
//
//    pColumnClass := tColumnClass.Create(iPosSource,-1); // '-1' = jusqu'au bout de la ligne
//    dUpgradeColumn.Add('Source',pColumnClass);

  end;

{ tColumnClass }

constructor tColumnClass.create(aPos1, aLen: Integer);
begin
    iPos := aPos1;
    iLen := aLen;
end;

end.
